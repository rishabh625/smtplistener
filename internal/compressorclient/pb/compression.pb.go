// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.6.1
// source: compressorclient/pb/compression.proto

package pb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type CompressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompressAlgo string `protobuf:"bytes,1,opt,name=compressAlgo,proto3" json:"compressAlgo,omitempty"`
	Data         string `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CompressRequest) Reset() {
	*x = CompressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compressorclient_pb_compression_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompressRequest) ProtoMessage() {}

func (x *CompressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_compressorclient_pb_compression_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompressRequest.ProtoReflect.Descriptor instead.
func (*CompressRequest) Descriptor() ([]byte, []int) {
	return file_compressorclient_pb_compression_proto_rawDescGZIP(), []int{0}
}

func (x *CompressRequest) GetCompressAlgo() string {
	if x != nil {
		return x.CompressAlgo
	}
	return ""
}

func (x *CompressRequest) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type CompressResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusMessage  bool   `protobuf:"varint,1,opt,name=statusMessage,proto3" json:"statusMessage,omitempty"`
	Err            string `protobuf:"bytes,2,opt,name=err,proto3" json:"err,omitempty"`
	CompressedData string `protobuf:"bytes,3,opt,name=compressedData,proto3" json:"compressedData,omitempty"`
}

func (x *CompressResponse) Reset() {
	*x = CompressResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compressorclient_pb_compression_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompressResponse) ProtoMessage() {}

func (x *CompressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_compressorclient_pb_compression_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompressResponse.ProtoReflect.Descriptor instead.
func (*CompressResponse) Descriptor() ([]byte, []int) {
	return file_compressorclient_pb_compression_proto_rawDescGZIP(), []int{1}
}

func (x *CompressResponse) GetStatusMessage() bool {
	if x != nil {
		return x.StatusMessage
	}
	return false
}

func (x *CompressResponse) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

func (x *CompressResponse) GetCompressedData() string {
	if x != nil {
		return x.CompressedData
	}
	return ""
}

type DeCompressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompressAlgo   string `protobuf:"bytes,1,opt,name=compressAlgo,proto3" json:"compressAlgo,omitempty"`
	CompressedData string `protobuf:"bytes,2,opt,name=compressedData,proto3" json:"compressedData,omitempty"`
}

func (x *DeCompressRequest) Reset() {
	*x = DeCompressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compressorclient_pb_compression_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeCompressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeCompressRequest) ProtoMessage() {}

func (x *DeCompressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_compressorclient_pb_compression_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeCompressRequest.ProtoReflect.Descriptor instead.
func (*DeCompressRequest) Descriptor() ([]byte, []int) {
	return file_compressorclient_pb_compression_proto_rawDescGZIP(), []int{2}
}

func (x *DeCompressRequest) GetCompressAlgo() string {
	if x != nil {
		return x.CompressAlgo
	}
	return ""
}

func (x *DeCompressRequest) GetCompressedData() string {
	if x != nil {
		return x.CompressedData
	}
	return ""
}

type DeCompressResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusMessage bool   `protobuf:"varint,1,opt,name=statusMessage,proto3" json:"statusMessage,omitempty"`
	Err           string `protobuf:"bytes,2,opt,name=err,proto3" json:"err,omitempty"`
	Data          string `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *DeCompressResponse) Reset() {
	*x = DeCompressResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compressorclient_pb_compression_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeCompressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeCompressResponse) ProtoMessage() {}

func (x *DeCompressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_compressorclient_pb_compression_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeCompressResponse.ProtoReflect.Descriptor instead.
func (*DeCompressResponse) Descriptor() ([]byte, []int) {
	return file_compressorclient_pb_compression_proto_rawDescGZIP(), []int{3}
}

func (x *DeCompressResponse) GetStatusMessage() bool {
	if x != nil {
		return x.StatusMessage
	}
	return false
}

func (x *DeCompressResponse) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

func (x *DeCompressResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type MTAHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReplyTo         string `protobuf:"bytes,1,opt,name=replyTo,proto3" json:"replyTo,omitempty"`
	Recipient       string `protobuf:"bytes,2,opt,name=recipient,proto3" json:"recipient,omitempty"`
	FromEmail       string `protobuf:"bytes,3,opt,name=fromEmail,proto3" json:"fromEmail,omitempty"`
	XJob            string `protobuf:"bytes,4,opt,name=xJob,proto3" json:"xJob,omitempty"`
	XDkimoptions    string `protobuf:"bytes,5,opt,name=xDkimoptions,proto3" json:"xDkimoptions,omitempty"`
	XDelivery       string `protobuf:"bytes,6,opt,name=xDelivery,proto3" json:"xDelivery,omitempty"`
	XFncid          string `protobuf:"bytes,7,opt,name=xFncid,proto3" json:"xFncid,omitempty"`
	XAbuseReportsTo string `protobuf:"bytes,8,opt,name=xAbuseReportsTo,proto3" json:"xAbuseReportsTo,omitempty"`
	XInjTime        string `protobuf:"bytes,9,opt,name=xInjTime,proto3" json:"xInjTime,omitempty"`
	XTrafficType    string `protobuf:"bytes,10,opt,name=xTrafficType,proto3" json:"xTrafficType,omitempty"`
	MessageID       string `protobuf:"bytes,11,opt,name=messageID,proto3" json:"messageID,omitempty"`
	XLDelivery      string `protobuf:"bytes,12,opt,name=xLDelivery,proto3" json:"xLDelivery,omitempty"`
	XGDelivery      string `protobuf:"bytes,13,opt,name=xGDelivery,proto3" json:"xGDelivery,omitempty"`
	XVirtualMta     string `protobuf:"bytes,14,opt,name=xVirtualMta,proto3" json:"xVirtualMta,omitempty"`
	FeedbackID      string `protobuf:"bytes,15,opt,name=feedbackID,proto3" json:"feedbackID,omitempty"`
	XTags           string `protobuf:"bytes,16,opt,name=xTags,proto3" json:"xTags,omitempty"`
	XMTATopic       string `protobuf:"bytes,17,opt,name=xMTATopic,proto3" json:"xMTATopic,omitempty"`
	XMTAPriority    string `protobuf:"bytes,18,opt,name=XMTAPriority,proto3" json:"XMTAPriority,omitempty"`
	ReturnPath      string `protobuf:"bytes,19,opt,name=ReturnPath,proto3" json:"ReturnPath,omitempty"`
	Subject         string `protobuf:"bytes,20,opt,name=Subject,proto3" json:"Subject,omitempty"`
	ScheduleType    string `protobuf:"bytes,21,opt,name=ScheduleType,proto3" json:"ScheduleType,omitempty"`
	Schedule        string `protobuf:"bytes,22,opt,name=Schedule,proto3" json:"Schedule,omitempty"`
	FromHeader      string `protobuf:"bytes,23,opt,name=FromHeader,proto3" json:"FromHeader,omitempty"`
	XInjIP          string `protobuf:"bytes,24,opt,name=XInjIP,proto3" json:"XInjIP,omitempty"`
	TimeQueued      string `protobuf:"bytes,25,opt,name=TimeQueued,proto3" json:"TimeQueued,omitempty"`
	RetryCount      int32  `protobuf:"varint,26,opt,name=RetryCount,proto3" json:"RetryCount,omitempty"`
	RetryAfter      string `protobuf:"bytes,27,opt,name=RetryAfter,proto3" json:"RetryAfter,omitempty"`
	MaxRetryCount   int32  `protobuf:"varint,28,opt,name=MaxRetryCount,proto3" json:"MaxRetryCount,omitempty"`
	MailSize        string `protobuf:"bytes,29,opt,name=MailSize,proto3" json:"MailSize,omitempty"`
	CustomHeader1   string `protobuf:"bytes,30,opt,name=CustomHeader1,proto3" json:"CustomHeader1,omitempty"`
	CustomHeader2   string `protobuf:"bytes,31,opt,name=CustomHeader2,proto3" json:"CustomHeader2,omitempty"`
	CustomHeader3   string `protobuf:"bytes,32,opt,name=CustomHeader3,proto3" json:"CustomHeader3,omitempty"`
	CustomHeader4   string `protobuf:"bytes,33,opt,name=CustomHeader4,proto3" json:"CustomHeader4,omitempty"`
	CustomHeader5   string `protobuf:"bytes,34,opt,name=CustomHeader5,proto3" json:"CustomHeader5,omitempty"`
	LastRetryTime   string `protobuf:"bytes,35,opt,name=LastRetryTime,proto3" json:"LastRetryTime,omitempty"`
	QueueId         string `protobuf:"bytes,36,opt,name=QueueId,proto3" json:"QueueId,omitempty"`
}

func (x *MTAHeader) Reset() {
	*x = MTAHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compressorclient_pb_compression_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MTAHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MTAHeader) ProtoMessage() {}

func (x *MTAHeader) ProtoReflect() protoreflect.Message {
	mi := &file_compressorclient_pb_compression_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MTAHeader.ProtoReflect.Descriptor instead.
func (*MTAHeader) Descriptor() ([]byte, []int) {
	return file_compressorclient_pb_compression_proto_rawDescGZIP(), []int{4}
}

func (x *MTAHeader) GetReplyTo() string {
	if x != nil {
		return x.ReplyTo
	}
	return ""
}

func (x *MTAHeader) GetRecipient() string {
	if x != nil {
		return x.Recipient
	}
	return ""
}

func (x *MTAHeader) GetFromEmail() string {
	if x != nil {
		return x.FromEmail
	}
	return ""
}

func (x *MTAHeader) GetXJob() string {
	if x != nil {
		return x.XJob
	}
	return ""
}

func (x *MTAHeader) GetXDkimoptions() string {
	if x != nil {
		return x.XDkimoptions
	}
	return ""
}

func (x *MTAHeader) GetXDelivery() string {
	if x != nil {
		return x.XDelivery
	}
	return ""
}

func (x *MTAHeader) GetXFncid() string {
	if x != nil {
		return x.XFncid
	}
	return ""
}

func (x *MTAHeader) GetXAbuseReportsTo() string {
	if x != nil {
		return x.XAbuseReportsTo
	}
	return ""
}

func (x *MTAHeader) GetXInjTime() string {
	if x != nil {
		return x.XInjTime
	}
	return ""
}

func (x *MTAHeader) GetXTrafficType() string {
	if x != nil {
		return x.XTrafficType
	}
	return ""
}

func (x *MTAHeader) GetMessageID() string {
	if x != nil {
		return x.MessageID
	}
	return ""
}

func (x *MTAHeader) GetXLDelivery() string {
	if x != nil {
		return x.XLDelivery
	}
	return ""
}

func (x *MTAHeader) GetXGDelivery() string {
	if x != nil {
		return x.XGDelivery
	}
	return ""
}

func (x *MTAHeader) GetXVirtualMta() string {
	if x != nil {
		return x.XVirtualMta
	}
	return ""
}

func (x *MTAHeader) GetFeedbackID() string {
	if x != nil {
		return x.FeedbackID
	}
	return ""
}

func (x *MTAHeader) GetXTags() string {
	if x != nil {
		return x.XTags
	}
	return ""
}

func (x *MTAHeader) GetXMTATopic() string {
	if x != nil {
		return x.XMTATopic
	}
	return ""
}

func (x *MTAHeader) GetXMTAPriority() string {
	if x != nil {
		return x.XMTAPriority
	}
	return ""
}

func (x *MTAHeader) GetReturnPath() string {
	if x != nil {
		return x.ReturnPath
	}
	return ""
}

func (x *MTAHeader) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *MTAHeader) GetScheduleType() string {
	if x != nil {
		return x.ScheduleType
	}
	return ""
}

func (x *MTAHeader) GetSchedule() string {
	if x != nil {
		return x.Schedule
	}
	return ""
}

func (x *MTAHeader) GetFromHeader() string {
	if x != nil {
		return x.FromHeader
	}
	return ""
}

func (x *MTAHeader) GetXInjIP() string {
	if x != nil {
		return x.XInjIP
	}
	return ""
}

func (x *MTAHeader) GetTimeQueued() string {
	if x != nil {
		return x.TimeQueued
	}
	return ""
}

func (x *MTAHeader) GetRetryCount() int32 {
	if x != nil {
		return x.RetryCount
	}
	return 0
}

func (x *MTAHeader) GetRetryAfter() string {
	if x != nil {
		return x.RetryAfter
	}
	return ""
}

func (x *MTAHeader) GetMaxRetryCount() int32 {
	if x != nil {
		return x.MaxRetryCount
	}
	return 0
}

func (x *MTAHeader) GetMailSize() string {
	if x != nil {
		return x.MailSize
	}
	return ""
}

func (x *MTAHeader) GetCustomHeader1() string {
	if x != nil {
		return x.CustomHeader1
	}
	return ""
}

func (x *MTAHeader) GetCustomHeader2() string {
	if x != nil {
		return x.CustomHeader2
	}
	return ""
}

func (x *MTAHeader) GetCustomHeader3() string {
	if x != nil {
		return x.CustomHeader3
	}
	return ""
}

func (x *MTAHeader) GetCustomHeader4() string {
	if x != nil {
		return x.CustomHeader4
	}
	return ""
}

func (x *MTAHeader) GetCustomHeader5() string {
	if x != nil {
		return x.CustomHeader5
	}
	return ""
}

func (x *MTAHeader) GetLastRetryTime() string {
	if x != nil {
		return x.LastRetryTime
	}
	return ""
}

func (x *MTAHeader) GetQueueId() string {
	if x != nil {
		return x.QueueId
	}
	return ""
}

type MTACompressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MtaCompressAlgo string     `protobuf:"bytes,1,opt,name=mtaCompressAlgo,proto3" json:"mtaCompressAlgo,omitempty"`
	Headers         *MTAHeader `protobuf:"bytes,2,opt,name=headers,proto3" json:"headers,omitempty"`
	Mail            string     `protobuf:"bytes,10,opt,name=mail,proto3" json:"mail,omitempty"`
}

func (x *MTACompressRequest) Reset() {
	*x = MTACompressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compressorclient_pb_compression_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MTACompressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MTACompressRequest) ProtoMessage() {}

func (x *MTACompressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_compressorclient_pb_compression_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MTACompressRequest.ProtoReflect.Descriptor instead.
func (*MTACompressRequest) Descriptor() ([]byte, []int) {
	return file_compressorclient_pb_compression_proto_rawDescGZIP(), []int{5}
}

func (x *MTACompressRequest) GetMtaCompressAlgo() string {
	if x != nil {
		return x.MtaCompressAlgo
	}
	return ""
}

func (x *MTACompressRequest) GetHeaders() *MTAHeader {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *MTACompressRequest) GetMail() string {
	if x != nil {
		return x.Mail
	}
	return ""
}

type MTACompressResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MtaSuccessMessage bool   `protobuf:"varint,1,opt,name=mtaSuccessMessage,proto3" json:"mtaSuccessMessage,omitempty"`
	MtaErr            string `protobuf:"bytes,10,opt,name=mtaErr,proto3" json:"mtaErr,omitempty"`
}

func (x *MTACompressResponse) Reset() {
	*x = MTACompressResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compressorclient_pb_compression_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MTACompressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MTACompressResponse) ProtoMessage() {}

func (x *MTACompressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_compressorclient_pb_compression_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MTACompressResponse.ProtoReflect.Descriptor instead.
func (*MTACompressResponse) Descriptor() ([]byte, []int) {
	return file_compressorclient_pb_compression_proto_rawDescGZIP(), []int{6}
}

func (x *MTACompressResponse) GetMtaSuccessMessage() bool {
	if x != nil {
		return x.MtaSuccessMessage
	}
	return false
}

func (x *MTACompressResponse) GetMtaErr() string {
	if x != nil {
		return x.MtaErr
	}
	return ""
}

type CompressHealthRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CompressHealthRequest) Reset() {
	*x = CompressHealthRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compressorclient_pb_compression_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompressHealthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompressHealthRequest) ProtoMessage() {}

func (x *CompressHealthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_compressorclient_pb_compression_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompressHealthRequest.ProtoReflect.Descriptor instead.
func (*CompressHealthRequest) Descriptor() ([]byte, []int) {
	return file_compressorclient_pb_compression_proto_rawDescGZIP(), []int{7}
}

type CompressHealthResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Active bool `protobuf:"varint,1,opt,name=active,proto3" json:"active,omitempty"`
}

func (x *CompressHealthResponse) Reset() {
	*x = CompressHealthResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compressorclient_pb_compression_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompressHealthResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompressHealthResponse) ProtoMessage() {}

func (x *CompressHealthResponse) ProtoReflect() protoreflect.Message {
	mi := &file_compressorclient_pb_compression_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompressHealthResponse.ProtoReflect.Descriptor instead.
func (*CompressHealthResponse) Descriptor() ([]byte, []int) {
	return file_compressorclient_pb_compression_proto_rawDescGZIP(), []int{8}
}

func (x *CompressHealthResponse) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

var File_compressorclient_pb_compression_proto protoreflect.FileDescriptor

var file_compressorclient_pb_compression_proto_rawDesc = []byte{
	0x0a, 0x25, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2f, 0x70, 0x62, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x70, 0x62, 0x22, 0x49, 0x0a, 0x0f, 0x43,
	0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22,
	0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x41, 0x6c, 0x67, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x41, 0x6c,
	0x67, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x72, 0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65,
	0x72, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x22, 0x5f, 0x0a, 0x11, 0x44, 0x65,
	0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x41, 0x6c, 0x67, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x41,
	0x6c, 0x67, 0x6f, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6d,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x22, 0x60, 0x0a, 0x12, 0x44,
	0x65, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x72, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x83, 0x09,
	0x0a, 0x09, 0x4d, 0x54, 0x41, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x72,
	0x65, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65,
	0x70, 0x6c, 0x79, 0x54, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69,
	0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x12, 0x12, 0x0a, 0x04, 0x78, 0x4a, 0x6f, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x78, 0x4a, 0x6f, 0x62, 0x12, 0x22, 0x0a, 0x0c, 0x78, 0x44, 0x6b, 0x69, 0x6d, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x78, 0x44, 0x6b,
	0x69, 0x6d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x78, 0x44, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x78, 0x44,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x78, 0x46, 0x6e, 0x63, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x78, 0x46, 0x6e, 0x63, 0x69, 0x64, 0x12,
	0x28, 0x0a, 0x0f, 0x78, 0x41, 0x62, 0x75, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x54, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x78, 0x41, 0x62, 0x75, 0x73, 0x65,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x54, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x78, 0x49, 0x6e,
	0x6a, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x78, 0x49, 0x6e,
	0x6a, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x78, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x78, 0x54, 0x72,
	0x61, 0x66, 0x66, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x49, 0x44, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x78, 0x4c, 0x44, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x78, 0x4c, 0x44,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x78, 0x47, 0x44, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x78, 0x47, 0x44,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x78, 0x56, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x4d, 0x74, 0x61, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x78, 0x56,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x65, 0x65,
	0x64, 0x62, 0x61, 0x63, 0x6b, 0x49, 0x44, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66,
	0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x78, 0x54, 0x61,
	0x67, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x78, 0x54, 0x61, 0x67, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x78, 0x4d, 0x54, 0x41, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x78, 0x4d, 0x54, 0x41, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x22, 0x0a,
	0x0c, 0x58, 0x4d, 0x54, 0x41, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x58, 0x4d, 0x54, 0x41, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x46,
	0x72, 0x6f, 0x6d, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x46, 0x72, 0x6f, 0x6d, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x58,
	0x49, 0x6e, 0x6a, 0x49, 0x50, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x58, 0x49, 0x6e,
	0x6a, 0x49, 0x50, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x52, 0x65, 0x74, 0x72, 0x79, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x74, 0x72, 0x79, 0x41, 0x66, 0x74, 0x65,
	0x72, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x52, 0x65, 0x74, 0x72, 0x79, 0x41, 0x66,
	0x74, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x74, 0x72, 0x79, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x4d, 0x61, 0x78, 0x52,
	0x65, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x61, 0x69,
	0x6c, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4d, 0x61, 0x69,
	0x6c, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x31, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x31, 0x12, 0x24, 0x0a, 0x0d, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x32, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x32, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x33, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x33, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x34, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x34, 0x12, 0x24, 0x0a,
	0x0d, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x35, 0x18, 0x22,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x35, 0x12, 0x24, 0x0a, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x74, 0x72, 0x79,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x4c, 0x61, 0x73, 0x74,
	0x52, 0x65, 0x74, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x49, 0x64, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x49, 0x64, 0x22, 0x7b, 0x0a, 0x12, 0x4d, 0x54, 0x41, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x74, 0x61,
	0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x41, 0x6c, 0x67, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x6d, 0x74, 0x61, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x41,
	0x6c, 0x67, 0x6f, 0x12, 0x27, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x54, 0x41, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x61, 0x69, 0x6c,
	0x22, 0x5b, 0x0a, 0x13, 0x4d, 0x54, 0x41, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x6d, 0x74, 0x61, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x11, 0x6d, 0x74, 0x61, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x74, 0x61, 0x45, 0x72, 0x72, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x74, 0x61, 0x45, 0x72, 0x72, 0x22, 0x17, 0x0a,
	0x15, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x30, 0x0a, 0x16, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x32, 0x89, 0x02, 0x0a, 0x0a, 0x43, 0x6f, 0x6d,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x12, 0x37, 0x0a, 0x08, 0x43, 0x6f, 0x6d, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x3d, 0x0a, 0x0a, 0x44, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x12, 0x15,
	0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x43, 0x6f, 0x6d,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x40, 0x0a, 0x0b, 0x4d, 0x54, 0x41, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16,
	0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x54, 0x41, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x54, 0x41, 0x43,
	0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x41, 0x0a, 0x06, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x19, 0x2e, 0x70, 0x62,
	0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x42, 0x15, 0x5a, 0x13, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x6f, 0x72, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_compressorclient_pb_compression_proto_rawDescOnce sync.Once
	file_compressorclient_pb_compression_proto_rawDescData = file_compressorclient_pb_compression_proto_rawDesc
)

func file_compressorclient_pb_compression_proto_rawDescGZIP() []byte {
	file_compressorclient_pb_compression_proto_rawDescOnce.Do(func() {
		file_compressorclient_pb_compression_proto_rawDescData = protoimpl.X.CompressGZIP(file_compressorclient_pb_compression_proto_rawDescData)
	})
	return file_compressorclient_pb_compression_proto_rawDescData
}

var file_compressorclient_pb_compression_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_compressorclient_pb_compression_proto_goTypes = []interface{}{
	(*CompressRequest)(nil),        // 0: pb.CompressRequest
	(*CompressResponse)(nil),       // 1: pb.CompressResponse
	(*DeCompressRequest)(nil),      // 2: pb.DeCompressRequest
	(*DeCompressResponse)(nil),     // 3: pb.DeCompressResponse
	(*MTAHeader)(nil),              // 4: pb.MTAHeader
	(*MTACompressRequest)(nil),     // 5: pb.MTACompressRequest
	(*MTACompressResponse)(nil),    // 6: pb.MTACompressResponse
	(*CompressHealthRequest)(nil),  // 7: pb.CompressHealthRequest
	(*CompressHealthResponse)(nil), // 8: pb.CompressHealthResponse
}
var file_compressorclient_pb_compression_proto_depIdxs = []int32{
	4, // 0: pb.MTACompressRequest.headers:type_name -> pb.MTAHeader
	0, // 1: pb.Compressor.Compress:input_type -> pb.CompressRequest
	2, // 2: pb.Compressor.DeCompress:input_type -> pb.DeCompressRequest
	5, // 3: pb.Compressor.MTACompress:input_type -> pb.MTACompressRequest
	7, // 4: pb.Compressor.Health:input_type -> pb.CompressHealthRequest
	1, // 5: pb.Compressor.Compress:output_type -> pb.CompressResponse
	3, // 6: pb.Compressor.DeCompress:output_type -> pb.DeCompressResponse
	6, // 7: pb.Compressor.MTACompress:output_type -> pb.MTACompressResponse
	8, // 8: pb.Compressor.Health:output_type -> pb.CompressHealthResponse
	5, // [5:9] is the sub-list for method output_type
	1, // [1:5] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_compressorclient_pb_compression_proto_init() }
func file_compressorclient_pb_compression_proto_init() {
	if File_compressorclient_pb_compression_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_compressorclient_pb_compression_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compressorclient_pb_compression_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompressResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compressorclient_pb_compression_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeCompressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compressorclient_pb_compression_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeCompressResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compressorclient_pb_compression_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MTAHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compressorclient_pb_compression_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MTACompressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compressorclient_pb_compression_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MTACompressResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compressorclient_pb_compression_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompressHealthRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compressorclient_pb_compression_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompressHealthResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_compressorclient_pb_compression_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_compressorclient_pb_compression_proto_goTypes,
		DependencyIndexes: file_compressorclient_pb_compression_proto_depIdxs,
		MessageInfos:      file_compressorclient_pb_compression_proto_msgTypes,
	}.Build()
	File_compressorclient_pb_compression_proto = out.File
	file_compressorclient_pb_compression_proto_rawDesc = nil
	file_compressorclient_pb_compression_proto_goTypes = nil
	file_compressorclient_pb_compression_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CompressorClient is the client API for Compressor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CompressorClient interface {
	Compress(ctx context.Context, in *CompressRequest, opts ...grpc.CallOption) (*CompressResponse, error)
	DeCompress(ctx context.Context, in *DeCompressRequest, opts ...grpc.CallOption) (*DeCompressResponse, error)
	MTACompress(ctx context.Context, in *MTACompressRequest, opts ...grpc.CallOption) (*MTACompressResponse, error)
	Health(ctx context.Context, in *CompressHealthRequest, opts ...grpc.CallOption) (*CompressHealthResponse, error)
}

type compressorClient struct {
	cc grpc.ClientConnInterface
}

func NewCompressorClient(cc grpc.ClientConnInterface) CompressorClient {
	return &compressorClient{cc}
}

func (c *compressorClient) Compress(ctx context.Context, in *CompressRequest, opts ...grpc.CallOption) (*CompressResponse, error) {
	out := new(CompressResponse)
	err := c.cc.Invoke(ctx, "/pb.Compressor/Compress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *compressorClient) DeCompress(ctx context.Context, in *DeCompressRequest, opts ...grpc.CallOption) (*DeCompressResponse, error) {
	out := new(DeCompressResponse)
	err := c.cc.Invoke(ctx, "/pb.Compressor/DeCompress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *compressorClient) MTACompress(ctx context.Context, in *MTACompressRequest, opts ...grpc.CallOption) (*MTACompressResponse, error) {
	out := new(MTACompressResponse)
	err := c.cc.Invoke(ctx, "/pb.Compressor/MTACompress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *compressorClient) Health(ctx context.Context, in *CompressHealthRequest, opts ...grpc.CallOption) (*CompressHealthResponse, error) {
	out := new(CompressHealthResponse)
	err := c.cc.Invoke(ctx, "/pb.Compressor/Health", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CompressorServer is the server API for Compressor service.
type CompressorServer interface {
	Compress(context.Context, *CompressRequest) (*CompressResponse, error)
	DeCompress(context.Context, *DeCompressRequest) (*DeCompressResponse, error)
	MTACompress(context.Context, *MTACompressRequest) (*MTACompressResponse, error)
	Health(context.Context, *CompressHealthRequest) (*CompressHealthResponse, error)
}

// UnimplementedCompressorServer can be embedded to have forward compatible implementations.
type UnimplementedCompressorServer struct {
}

func (*UnimplementedCompressorServer) Compress(context.Context, *CompressRequest) (*CompressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Compress not implemented")
}
func (*UnimplementedCompressorServer) DeCompress(context.Context, *DeCompressRequest) (*DeCompressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeCompress not implemented")
}
func (*UnimplementedCompressorServer) MTACompress(context.Context, *MTACompressRequest) (*MTACompressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MTACompress not implemented")
}
func (*UnimplementedCompressorServer) Health(context.Context, *CompressHealthRequest) (*CompressHealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}

func RegisterCompressorServer(s *grpc.Server, srv CompressorServer) {
	s.RegisterService(&_Compressor_serviceDesc, srv)
}

func _Compressor_Compress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompressorServer).Compress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Compressor/Compress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompressorServer).Compress(ctx, req.(*CompressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Compressor_DeCompress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeCompressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompressorServer).DeCompress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Compressor/DeCompress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompressorServer).DeCompress(ctx, req.(*DeCompressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Compressor_MTACompress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MTACompressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompressorServer).MTACompress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Compressor/MTACompress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompressorServer).MTACompress(ctx, req.(*MTACompressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Compressor_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompressHealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompressorServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Compressor/Health",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompressorServer).Health(ctx, req.(*CompressHealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Compressor_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Compressor",
	HandlerType: (*CompressorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Compress",
			Handler:    _Compressor_Compress_Handler,
		},
		{
			MethodName: "DeCompress",
			Handler:    _Compressor_DeCompress_Handler,
		},
		{
			MethodName: "MTACompress",
			Handler:    _Compressor_MTACompress_Handler,
		},
		{
			MethodName: "Health",
			Handler:    _Compressor_Health_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "compressorclient/pb/compression.proto",
}
